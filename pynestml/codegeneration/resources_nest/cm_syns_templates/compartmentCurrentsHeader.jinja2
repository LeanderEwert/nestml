#ifndef SYNAPSES_NEAT_H_{{cm_unique_suffix | upper }}
#define SYNAPSES_NEAT_H_{{cm_unique_suffix | upper }}

#include <stdlib.h>

#include "ring_buffer.h"

{% macro render_variable_type(variable) -%}
{%- with -%}
    {%- set symbol = variable.get_scope().resolve_to_symbol(variable.name, SymbolKind.VARIABLE) -%}
    {{ type_converter.convert(symbol.type_symbol) }}
{%- endwith -%}
{%- endmacro %}

namespace nest
{

{%- with %}
{%- for ion_channel_name, channel_info in chan_info.items() %}

class {{ion_channel_name}}{
private:
// user-defined parameters {{ion_channel_name}} channel (maximal conductance, reversal potential)
    {%- for pure_variable_name, variable_info in channel_info["gating_variables"].items() %}
    // state variable {{pure_variable_name -}}
        {%- set variable = variable_info["state_variable"] %}
        {%- set rhs_expression = variable_info["rhs_expression"] %}
    {{render_variable_type(variable)}} {{ variable.name}} = {{printer.print_expression(rhs_expression, with_origins = False) -}};
    {%- endfor %}
// state variables {{ion_channel_name}} channel
    {%- for variable_type, variable_info in channel_info["channel_parameters"].items() %}
    // parameter {{variable_type -}}
        {%- set variable = variable_info["parameter_block_variable"] %}
        {%- set rhs_expression = variable_info["rhs_expression"] %}
    {{render_variable_type(variable)}} {{ variable.name}} = {{printer.print_expression(rhs_expression, with_origins = False) -}};
    {%- endfor %}

public:
    // constructor, destructor
    {{ion_channel_name}}();
    {{ion_channel_name}}(const DictionaryDatum& channel_params);
    ~{{ion_channel_name}}(){};

    // initialization channel
    void init(){
    {%- for pure_variable_name, variable_info in channel_info["gating_variables"].items() -%}
        {%- set variable = variable_info["state_variable"] -%}
        {%- set rhs_expression = variable_info["rhs_expression"] -%}
        {{ variable.name}} = {{printer.print_expression(rhs_expression, with_origins = False) }};
    {%- endfor -%}
    };
    void append_recordables(std::map< std::string, double* >* recordables,
                            const long compartment_idx);

    // numerical integration step
    std::pair< double, double > f_numstep( const double v_comp, const double dt );

    // function declarations
{%- for pure_variable_name, state_variable_info in channel_info["gating_variables"].items() %}
{% for function_type, function_info in state_variable_info["expected_functions"].items() %}
    {{printer.print_function_declaration(function_info["ASTFunction"]) -}};
{% endfor %}
{%- endfor %}

};
{% endfor -%}
{% endwith -%}


////////////////////////////////////////////////// synapses

{% macro render_time_resolution_variable(synapse_info) -%}
{# we assume here that there is only one such variable ! #}
{%- with %}
{%- for analytic_helper_name, analytic_helper_info in synapse_info["analytic_helpers"].items() -%}
{%- if analytic_helper_info["is_time_resolution"] -%}
    {{ analytic_helper_name }}
{%- endif -%}
{%- endfor -%}
{% endwith %}
{%- endmacro %}

{%- with %}
{%- for synapse_name, synapse_info in syns_info.items() %}

class {{synapse_name}}{
private:
  // global synapse index
  long syn_idx = 0;

  // propagators, initialized via calibrate() to 0, refreshed in numstep
  {%- for convolution, convolution_info in synapse_info["convolutions"].items() %}
  {%- for state_variable_name, state_variable_info in convolution_info["analytic_solution"]["propagators"].items()%}
  double {{state_variable_name}};
  {%- endfor %}
  {%- endfor %}

  // kernel state variables, initialized via calibrate()
  {%- for convolution, convolution_info in synapse_info["convolutions"].items() %}
  {%- for state_variable_name, state_variable_info in convolution_info["analytic_solution"]["kernel_states"].items()%}
  double {{state_variable_name}};
  {%- endfor %}
  {%- endfor %}

  // user defined parameters, initialized via calibrate()
  {%- for param_name, param_declaration in synapse_info["parameters_used"].items() %}
  double {{param_name}};
  {%- endfor %}

  // user declared internals in order they were declared, initialized via calibrate()
  {%- for internal_name, internal_declaration in synapse_info["internals_used_declared"] %}
  double {{internal_name}};
  {%- endfor %}

  // spike buffer
  std::shared_ptr< RingBuffer > {{synapse_info["buffer_name"]}}_;

public:
  // constructor, destructor
  {{synapse_name}}(std::shared_ptr< RingBuffer >  {{synapse_info["buffer_name"]}}, const long syn_index, const DictionaryDatum& receptor_params);
  ~{{synapse_name}}(){};

  // numerical integration step
  std::pair< double, double > f_numstep( const double v_comp, const double {{render_time_resolution_variable(synapse_info)}}, const long lag );

  // calibration
  void calibrate();
  void append_recordables(std::map< std::string, double* >* recordables);

  // function declarations
  {% for function in neuron.get_functions() %}
  {{printer.print_function_declaration(function)}};
  {% endfor %}
};


{% endfor -%}
{% endwith -%}

///////////////////////////////////////////// currents

{%- set channel_suffix = "_chan_" %}

class CompartmentCurrents{{cm_unique_suffix}} {
private:
  // ion channels
{% with %}
  {%- for ion_channel_name, channel_info in chan_info.items() %}
  {{ion_channel_name}} {{ion_channel_name}}{{channel_suffix}};
  {% endfor -%}
{% endwith %}

  // synapses
  {%- with %}
  {%- for synapse_name, synapse_info in syns_info.items() %}
  std::vector < {{synapse_name}} > {{synapse_name}}_syns_;
  {% endfor -%}
  {% endwith -%}

public:
  CompartmentCurrents{{cm_unique_suffix}}(){};
  CompartmentCurrents{{cm_unique_suffix}}(const DictionaryDatum& channel_params)
  {
  {%- with %}
    {%- for ion_channel_name, channel_info in chan_info.items() %}
    {{ion_channel_name}}{{channel_suffix}} = {{ion_channel_name}}( channel_params );
    {% endfor -%}
  {% endwith -%}
  };
  ~CompartmentCurrents{{cm_unique_suffix}}(){};

  void init(){
    // initialization of the ion channels
  {%- with %}
    {%- for ion_channel_name, channel_info in chan_info.items() %}
    {{ion_channel_name}}{{channel_suffix}}.init();
    {% endfor -%}
  {% endwith -%}

    // initialization of synapses
  {%- with %}
  {%- for synapse_name, synapse_info in syns_info.items() %}
    // initialization of {{synapse_name}} synapses
    for( auto syn_it = {{synapse_name}}_syns_.begin();
         syn_it != {{synapse_name}}_syns_.end();
         ++syn_it )
    {
      syn_it->calibrate();
    }
  {% endfor -%}
  {% endwith -%}

  }

  void add_synapse_with_buffer( const std::string& type, std::shared_ptr< RingBuffer > b_spikes, const long syn_idx, const DictionaryDatum& receptor_params )
  {
  {%- with %}
  {%- for synapse_name, synapse_info in syns_info.items() %}
    {% if not loop.first %}else{% endif %} if ( type == "{{synapse_name}}" )
    {
      //{{synapse_name}} syn( b_spikes, receptor_params );
      //{{synapse_name}}_syns_.push_back( syn );
      {{synapse_name}}_syns_.push_back( {{synapse_name}}( b_spikes, syn_idx, receptor_params ) );
    }
  {% endfor -%}
  {% endwith -%}
    else
    {
      assert( false );
    }
  };

  std::map< std::string, double* > get_recordables( const long compartment_idx )
  {
    std::map< std::string, double* > recordables;

    // append ion channel state variables to recordables
    {%- with %}
    {%- for ion_channel_name, channel_info in chan_info.items() %}
    {{ion_channel_name}}{{channel_suffix}}.append_recordables( &recordables, compartment_idx );
    {% endfor -%}
    {% endwith -%}

    // append synapse state variables to recordables
    {%- with %}
    {%- for synapse_name, synapse_info in syns_info.items() %}
    for( auto syn_it = {{synapse_name}}_syns_.begin(); syn_it != {{synapse_name}}_syns_.end(); syn_it++)
      syn_it->append_recordables( &recordables );
    {% endfor -%}
    {% endwith -%}

    return recordables;
  };

  std::pair< double, double > f_numstep( const double v_comp, const double dt, const long lag )
  {
    std::pair< double, double > gi(0., 0.);
    double g_val = 0.;
    double i_val = 0.;

  {%- with %}
    {%- for ion_channel_name, channel_info in chan_info.items() %}
    // contribution of {{ion_channel_name}} channel
    gi = {{ion_channel_name}}{{channel_suffix}}.f_numstep( v_comp, dt );

    g_val += gi.first;
    i_val += gi.second;

    {% endfor -%}
  {% endwith -%}

  {%- with %}
  {%- for synapse_name, synapse_info in syns_info.items() %}
    // contribution of {{synapse_name}} synapses
    for( auto syn_it = {{synapse_name}}_syns_.begin();
         syn_it != {{synapse_name}}_syns_.end();
         ++syn_it )
    {
      gi = syn_it->f_numstep( v_comp, dt, lag );

      g_val += gi.first;
      i_val += gi.second;
    }
  {% endfor -%}
  {% endwith -%}

    return std::make_pair(g_val, i_val);
  };

};

} // namespace

#endif /* #ifndef SYNAPSES_NEAT_H_{{cm_unique_suffix | upper }} */
