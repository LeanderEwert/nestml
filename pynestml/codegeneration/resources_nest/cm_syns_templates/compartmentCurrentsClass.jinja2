#include "{{neuronSpecificFileNamesCmSyns["compartmentcurrents"]}}.h"

{%- set current_conductance_name_prefix = "g" %}
{%- set current_equilibrium_name_prefix = "e" %}
{% macro render_dynamic_channel_variable_name(variable_type, ion_channel_name) -%}
    {%- if variable_type == "gbar" -%}
        {{ current_conductance_name_prefix~"_"~ion_channel_name }}
    {%- elif variable_type == "e" -%}
        {{ current_equilibrium_name_prefix~"_"~ion_channel_name }}
    {%- endif -%}
{%- endmacro -%}

{%- macro render_state_variable_name(pure_variable_name, ion_channel_name) -%}
    {{ pure_variable_name~"_"~ion_channel_name }}
{%- endmacro -%}


{% macro render_function_return_type(function) -%}
{%- with -%}
    {%- set symbol = function.get_scope().resolve_to_symbol(function.get_name(), SymbolKind.FUNCTION) -%}
    {{ type_converter.convert(symbol.get_return_type()) }}
{%- endwith -%} 
{%- endmacro -%}

{% macro render_inline_expression_type(inline_expression) -%}
{%- with -%}
    {%- set symbol = inline_expression.get_scope().resolve_to_symbol(inline_expression.variable_name, SymbolKind.VARIABLE) -%}
    {{ type_converter.convert(symbol.get_type_symbol()) }}
{%- endwith -%} 
{%- endmacro -%}

{% macro render_static_channel_variable_name(variable_type, ion_channel_name) -%}

{%- with %}
{%- for ion_channel_nm, channel_info in cm_info.items() -%}
    {%- if ion_channel_nm == ion_channel_name -%}
        {%- for variable_tp, variable_info in channel_info["channel_parameters"].items() -%}
            {%- if variable_tp == variable_type -%}
                {%- set variable = variable_info["parameter_block_variable"] -%}
                {{ variable.name }}
            {%- endif -%}
        {%- endfor -%}
    {%- endif -%}
{%- endfor -%}
{% endwith %} 
   
{%- endmacro %}

{% macro render_channel_function(function, ion_channel_name) -%}
{%- with %}
{{printer.print_function_definition(function, "nest::"~ion_channel_name)}}
{
{%-   filter indent(2,True) %}
{%-   with ast = function.get_block() %}
{%-     include "directives/Block.jinja2" %}
{%-   endwith %}
{%-   endfilter %}
}
{% endwith %} 
{%- endmacro %}


{%- with %}
{%- for ion_channel_name, channel_info in cm_info.items() %}

// {{ion_channel_name}} channel //////////////////////////////////////////////////////////////////
nest::{{ion_channel_name}}::{{ion_channel_name}}()

{%- for pure_variable_name, variable_info in channel_info["gating_variables"].items() %}
// state variable {{pure_variable_name -}}
{%- set variable = variable_info["state_variable"] %}
{%- set rhs_expression = variable_info["rhs_expression"] %}
{% if loop.first %}: {% else %}, {% endif %}
{{- variable.name}}({{ printer.print_expression(rhs_expression, with_origins = False) -}}) 
{%- endfor -%}

{% for variable_type, variable_info in channel_info["channel_parameters"].items() %}
// channel parameter {{variable_type -}}
{%- set variable = variable_info["parameter_block_variable"] %}
{%- set rhs_expression = variable_info["rhs_expression"] %}
,{{- variable.name}}({{printer.print_expression(rhs_expression, with_origins = False) -}}) 
{%- endfor -%}
{}    

nest::{{ion_channel_name}}::{{ion_channel_name}}(const DictionaryDatum& channel_params)

{%- for pure_variable_name, variable_info in channel_info["gating_variables"].items() %}
// state variable {{pure_variable_name -}}
{%- set variable = variable_info["state_variable"] %}
{%- set rhs_expression = variable_info["rhs_expression"] %}
{% if loop.first %}: {% else %}, {% endif %}
{{- variable.name}}({{printer.print_expression(rhs_expression, with_origins = False) -}}) 
{%- endfor -%}

{% for variable_type, variable_info in channel_info["channel_parameters"].items() %}
// channel parameter {{variable_type -}}
{%- set variable = variable_info["parameter_block_variable"] %}
{%- set rhs_expression = variable_info["rhs_expression"] %}
,{{- variable.name}}({{printer.print_expression(rhs_expression, with_origins = False) -}}) 
{%- endfor %}
// update {{ion_channel_name}} channel parameters
{
    {%- with %}
    {%- for variable_type, variable_info in channel_info["channel_parameters"].items() %}
        {%- set variable = variable_info["parameter_block_variable"] %}
        {%- set dynamic_variable = render_dynamic_channel_variable_name(variable_type, ion_channel_name) %}
    // {{ion_channel_name}} channel parameter {{dynamic_variable }} 
    if( channel_params->known( "{{dynamic_variable}}" ) )
        {{variable.name}} = getValue< double >( channel_params, "{{dynamic_variable}}" );
    {%- endfor -%}
    {% endwith %}
}

std::pair< double, double > nest::{{ion_channel_name}}::f_numstep(const double v_comp, const double dt)
{
    double g_val = 0., i_val = 0.;
    {%- set inline_expression = channel_info["ASTInlineExpression"] %}
    {%- set dynamic_variable = render_dynamic_channel_variable_name("gbar", ion_channel_name) %}
    {%- set gbar_variable = channel_info["channel_parameters"]["gbar"]["parameter_block_variable"] %}    
    if ({{gbar_variable.name}} > 1e-9)
    {
        {% for pure_variable_name, variable_info in channel_info["gating_variables"].items() %}
        // activation and timescale of state variable '{{pure_variable_name}}'
            {%- set inner_variable = variable_info["ASTVariable"] %}
            {%- set expected_functions_info = variable_info["expected_functions"] %}
            {%- for expected_function_type, expected_function_info in expected_functions_info.items() %}
                {%- set result_variable_name = expected_function_info["result_variable_name"] %}
                {%- set function_to_call = expected_function_info["ASTFunction"] %}
                {%- set function_parameters = function_to_call.get_parameters() %}
        // {{expected_function_type}}
        {{render_function_return_type(function_to_call)}} {{ result_variable_name }} = {{function_to_call.get_name()}}(
        {%- for parameter in function_parameters -%}
            {{- parameter.name }}
        {%- endfor -%}
        );
        {%- endfor %}
            {%- endfor %}
        
        {% for pure_variable_name, variable_info in channel_info["gating_variables"].items() %}
        // advance state variable {{pure_variable_name}} one timestep
            {%- set inner_variable = variable_info["ASTVariable"] %}
            {%- set expected_functions_info = variable_info["expected_functions"] %}
            {%- set tau_result_variable_name = expected_functions_info["tau"]["result_variable_name"] %}
            {%- set inf_result_variable_name = expected_functions_info["inf"]["result_variable_name"] %}
            {%- set propagator = "p_"~pure_variable_name~"_"~ion_channel_name %}
            {%- set state_variable = render_state_variable_name(pure_variable_name, ion_channel_name) %}
        {{render_inline_expression_type(inline_expression)}} {{propagator}} = exp(-dt / {{tau_result_variable_name}}); //
        {{state_variable}} *= {{propagator}} ;
        {{state_variable}} += (1. - {{propagator}}) * {{inf_result_variable_name}};
        {%- endfor %}
        
        {% set g_dynamic = render_dynamic_channel_variable_name("gbar", ion_channel_name) %}
        // compute the conductance of the {{ion_channel_name}} channel     
        {{render_inline_expression_type(inline_expression)}} {{ g_dynamic }} = {{gbar_variable.name}} * {{ printer.print_expression(inline_expression.get_expression(), with_origins = False) }}; 
    
        // add to variables for numerical integration
        {%- set e_channel = render_static_channel_variable_name("e", ion_channel_name) %}
        g_val += {{ g_dynamic }} / 2.;
        i_val += {{ g_dynamic }} * ( {{e_channel}} - v_comp / 2. );

    
    }

    return std::make_pair(g_val, i_val);

}

{%- for pure_variable_name, state_variable_info in channel_info["gating_variables"].items() %}
{%- for function_type, function_info in state_variable_info["expected_functions"].items() %}
{{render_channel_function(function_info["ASTFunction"], ion_channel_name)}}
{%- endfor %}
{%- endfor %}

{% endfor -%}
{% endwith %}
////////////////////////////////////////////////////////////////////////////////


{%- for synapse_name, synapse_info in syns_info.items() %}
// {{synapse_name}} synapse ////////////////////////////////////////////////////////////////    
nest::{{synapse_name}}::{{synapse_name}}( std::shared_ptr< RingBuffer >  {{synapse_info["buffer_name"]}}, const DictionaryDatum& receptor_params )
  {%- for param_name, param_declaration in synapse_info["parameters_used"].items() %}
    {% if loop.first %}: {% else %}, {% endif -%}
    {{param_name}}_ = ({{printer.print_expression(param_declaration.get_expression(), with_origins = False)}})
  {%- endfor %}  
{
  // update parameters
  {%- for param_name, param_declaration in synapse_info["parameters_used"].items() %}
  if( receptor_params->known( "{{param_name}}_{{synapse_name}}" ) )
    {{param_name}}_ = getValue< double >( receptor_params, "{{param_name}}_{{synapse_name}}" );
  {%- endfor %}
      
  // initial values for state variables
{%- filter indent(2) %}
  {%- for convolution, convolution_info in synapse_info["convolutions"].items() %}
  {%- for state_variable_name, state_variable_info in convolution_info["analytic_solution"]["kernel_states"].items()%}
{{state_variable_name}} = {{printer.print_expression(state_variable_info["init_expression"], with_origins = False)}};
  {%- endfor %}
  {%- endfor %}
{%- endfilter %} 
      
  //double tp = (tau_r_ * tau_d_) / (tau_d_ - tau_r_) * std::log( tau_d_ / tau_r_ ); // tau_syn_AMPA_
  //g_norm_ = 1. / ( -std::exp( -tp / tau_r_ ) + std::exp( -tp / tau_d_ ) );

  // store pointer to ringbuffer
  {{synapse_info["buffer_name"]}}_ = {{synapse_info["buffer_name"]}};
}

std::pair< double, double > nest::{{synapse_name}}::f_numstep( const double v_comp, const double dt, const long lag )
{
  // construct propagators -> make this in calibrate block(?)
  {%- for convolution, convolution_info in synapse_info["convolutions"].items() %}
  {%- for state_variable_name, state_variable_info in convolution_info["analytic_solution"]["propagators"].items()%}
  double {{state_variable_name}} = {{printer.print_expression(state_variable_info["init_expression"], with_origins = False)}};
  {%- endfor %}
  {%- endfor %}
  
  // get spikes
  double s_val = {{synapse_info["buffer_name"]}}_->get_value( lag ) //  * g_norm_;

  // update kernel state variable
  {%- for convolution, convolution_info in synapse_info["convolutions"].items() %}
  {%- for state_variable_name, state_variable_info in convolution_info["analytic_solution"]["kernel_states"].items()%}
  {{state_variable_name}} = {{printer.print_expression(state_variable_info["update_expression"], with_origins = False)}};
  {{state_variable_name}} -= s_val;
  // compute synaptic conductance
  double g_{{synapse_name}} = {{state_variable_name}};
  {%- endfor %}
  {%- endfor %}

  // total current
  // this expression should be the transformed inline expression
  // g_AMPA * ( e_rev_ - v_comp )
  double i_tot = {{printer.print_expression(synapse_info["inline_expression"].get_expression(), with_origins = False)}};
  
  // derivative of that expression
  // voltage derivative of total current
  // compute derivative with respect to current with sympy
  double d_i_tot_dv = - ({{printer.print_expression(synapse_info["inline_expression_d"], with_origins = False)}}); 

  // for numerical integration
  double g_val = - d_i_tot_dv / 2.;
  double i_val = i_tot - d_i_tot_dv * v_comp / 2.;

  return std::make_pair(g_val, i_val);
  
{%- for function in neuron.get_functions() %}
{{printer.print_function_definition(function, namespace = synapse_name)}}
{
{%-   filter indent(2,True) %}
{%-   with ast = function.get_block() %}
{%-     include "directives/Block.jinja2" %}
{%-   endwith %}
{%-   endfilter %}
}
{%- endfor %}

}

// {{synapse_name}} synapse end ///////////////////////////////////////////////////////////
{%- endfor %}






