{#
  Generates C++ function call
  @param ast ASTFunctionCall
#}
{%- if tracing %}/* generated by {{self._TemplateReference__context.name}} */ {% endif %}
{%- if ast.get_name() == PredefinedFunctions.INTEGRATE_ODES %}

{%-     if ast.get_args() | length > 0 %}
{%-       set analytic_state_variables_ = utils.filter_variables_list(analytic_state_variables_except_convolutions, ast.get_args()) %}
{%-     else %}
{%-       set analytic_state_variables_ = analytic_state_variables_except_convolutions %}
{%-     endif %}

{%-     include "directives/AnalyticIntegrationStep_begin.jinja2" %}

{%-     if uses_numeric_solver %}
{%-       if analytic_state_variables_from_convolutions | length > 0 %}
// solver step should update state of convolutions internally, but not change ode_state[] pertaining to convolutions; convolution integration should be independent of integrate_odes() calls
// buffer the old values
{%-         for variable_name in analytic_state_variables_from_convolutions %}
{%-           set update_expr = update_expressions[variable_name] %}
{%-           set variable_symbol = variable_symbols[variable_name] %}
const double {{ variable_name }}__orig = {{ printer.print(utils.get_state_variable_by_name(astnode, variable_symbol.get_symbol_name())) }};
{%-         endfor %}
{%        endif %}

{%-       include "directives/GSLIntegrationStep.jinja2" %}

{%-       if analytic_state_variables_from_convolutions | length > 0 %}
// restore the old values for convolutions
{%-         for variable_name in analytic_state_variables_from_convolutions %}
{%-           set variable_symbol = variable_symbols[variable_name] %}
{{ printer.print(utils.get_state_variable_by_name(astnode, variable_symbol.get_symbol_name())) }} = {{ variable_name }}__orig;
{%-         endfor %}
{%        endif %}

{%-     endif %}

{%-     include "directives/AnalyticIntegrationStep_end.jinja2" %}
{%- elif ast.get_name() == PredefinedFunctions.PROCESS_INPUT %}
    // process continuous type inputs
    
{%-     if ast.get_args() | length > 0 %}
{%- set continuous_port_names = neuron.get_continuous_input_ports() %}
{%-     else %}
{%-       set analytic_state_variables_ = utils.filter_variables_list(neuron.get_continuous_input_ports(), ast.get_args()) %}
{%- set continuous_port_names = neuron.get_continuous_input_ports() %}
{%-     endif %}

    // process inputs from continuous-type input ports
{%- for inputPort in continuous_port_names %}
    B_.{{ inputPort.name }}_grid_sum_ = get_{{ inputPort.name }}().get_value(lag);
{% endfor %}

{% set comment_printed = false %}
{%-     if ast.get_args() | length > 0 %}

{%- for port_name, spike_updates_for_port in spike_updates.items() %}
{%-     for arg in ast.get_args() %}
{%-         if port_name == arg.get_variable().get_name() %}
{%-             for ast in spike_updates_for_port -%}
{%-                 if not comment_printed %}
    // process spike type inputs
{%-                 set comment_printed = true %}
{%-                 endif %}
{%-                 include "directives/Assignment.jinja2" %}
{%-             endfor %}
{%-         endif %}
{%-     endfor %}
{%- endfor %}

{%-     else %}

{%- filter indent(4) %}
{%-   include "directives/ApplySpikesFromBuffers.jinja2" %}
{% endfilter %}
{%-     endif %}


{#

{%- for port in neuron.get_spike_input_ports() %}
{%-   if port.has_vector_parameter() -%}
{%      set size = utils.get_numeric_vector_size(port) | int %}
{%-     for i in range(size) %}
    {{port.get_symbol_name().upper()}}_{{i + 1}} = {{ns.count}},
{%-       set ns.count = ns.count + 1 -%}
{%-     endfor %}
{%-   else %}
    {{port.get_symbol_name().upper()}} = {{ns.count}},
{%-     set ns.count = ns.count + 1 -%}
{%-   endif -%}
{%- endfor %}

#}


{#

{%- set spiking_port_names = neuron.get_continuous_input_ports() %}
{%-     else %}
{%-       set analytic_state_variables_ = utils.filter_variables_list(neuron.get_continuous_input_ports(), ast.get_args()) %}
{%- set continuous_port_names = neuron.get_continuous_input_ports() %}
{%-     endif %}

#}




{%- else %}
{{ printer.print(ast) }};
{%- endif %}
