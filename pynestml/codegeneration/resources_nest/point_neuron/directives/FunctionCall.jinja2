{#
  Generates C++ function call
  @param ast ASTFunctionCall
#}
{%- if tracing %}/* generated by {{self._TemplateReference__context.name}} */ {% endif %}
{%- if utils.is_integrate(ast) %}

{%-     if ast.get_args() | length > 0 %}
{%-       set analytic_state_variables_ = utils.filter_variables_list(analytic_state_variables_except_convolutions, ast.get_args()) %}
{%-     else %}
{%-       set analytic_state_variables_ = analytic_state_variables_except_convolutions %}
{%-     endif %}

{%-     include "directives/AnalyticIntegrationStep_begin.jinja2" %}

{%-     if uses_numeric_solver %}
{%-       if analytic_state_variables_from_convolutions | length > 0 %}
// solver step should update state of convolutions internally, but not change ode_state[] pertaining to convolutions; convolution integration should be independent of integrate_odes() calls
// buffer the old values
{%-         for variable_name in analytic_state_variables_from_convolutions %}
{%-           set update_expr = update_expressions[variable_name] %}
{%-           set variable_symbol = variable_symbols[variable_name] %}
const double {{ variable_name }}__orig = {{ printer.print(utils.get_state_variable_by_name(astnode, variable_symbol.get_symbol_name())) }};
{%-         endfor %}
{%        endif %}

{%-       include "directives/GSLIntegrationStep.jinja2" %}

{%-       if analytic_state_variables_from_convolutions | length > 0 %}
// restore the old values for convolutions
{%-         for variable_name in analytic_state_variables_from_convolutions %}
{%-           set variable_symbol = variable_symbols[variable_name] %}
{{ printer.print(utils.get_state_variable_by_name(astnode, variable_symbol.get_symbol_name())) }} = {{ variable_name }}__orig;
{%-         endfor %}
{%        endif %}

{%-     endif %}

{%-     include "directives/AnalyticIntegrationStep_end.jinja2" %}
{%- else %}
{{ printer.print(ast) }};
{%- endif %}
