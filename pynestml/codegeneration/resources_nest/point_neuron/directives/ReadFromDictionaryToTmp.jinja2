{#
  Generates a code snippet that retrieves a data from dictionary and sets it the the model variable.
  @param variable VariableSymbol
#}
{%- if tracing %}/* generated by {{self._TemplateReference__context.name}} */ {% endif %}

{%- if not variable.is_inline_expression %}
{%- if not variable.is_state() %}
{{declarations.print_variable_type(variable)}} tmp_{{names.name(variable)}} = {{names.getter(variable)}}();
updateValue<{{declarations.print_variable_type(variable)}}>(__d, nest::{{names_namespace}}::_{{names.name(variable)}}, tmp_{{names.name(variable)}});

{%- if vector_symbols|length > 0 %}
// Resize vectors
if (tmp_{{names.name(variable)}} != {{names.getter(variable)}}())
{
{%- for vector_var in vector_symbols %}
{%- if vector_var.get_vector_parameter() == variable.get_symbol_name() %}
  {{declarations.print_variable_type(vector_var)}} _tmp_{{names.name(vector_var)}} = {{names.getter(vector_var)}}();
  _tmp_{{names.name(vector_var)}}.resize(tmp_{{names.name(variable)}}, 0.);
  set_{{names.name(vector_var)}}(_tmp_{{names.name(vector_var)}});
{%- endif %}
{%- endfor %}
}
{%- endif %}

{%- else %}
{{declarations.print_variable_type(variable)}} tmp_{{names.convert_to_cpp_name(variable.get_symbol_name())}} = {{names.getter(variable)}}();
updateValue<{{declarations.print_variable_type(variable)}}>(__d, nest::{{names_namespace}}::_{{variable.get_symbol_name()}}, tmp_{{names.convert_to_cpp_name(variable.get_symbol_name())}});
{%- endif %}

{%- if variable.has_vector_parameter() %}
{%- set vector_param = variable.get_vector_parameter() %}
{%- if vector_param|int == 0 %}
{%- set vector_param = "tmp_" + vector_param %}
{%- endif %}
if ( tmp_{{names.name(variable)}}.size() != {{vector_param}} )
{
  std::stringstream msg;
  msg << "The vector \"{{names.name(variable)}}\" does not match its size: " << {{vector_param}};
  throw nest::BadProperty(msg.str());
}
{%- endif %}
{%- else %}
  // ignores '{{names.name(variable)}}' {{declarations.print_variable_type(variable)}}' since it is an function and setter isn't defined
{%- endif %}
