{#
  Generates code for process_input() function call
  @param ast ASTFunctionCall
#}
{%- if tracing %}/* generated by {{self._TemplateReference__context.name}} */ {% endif %}

{# process inputs from continuous-type input ports #}

{%- if ast.get_args() | length > 0 %}
{%-     set continuous_port_names = utils.filter_variables_list(neuron.get_continuous_input_port_names(), ast.get_args()) %}
{%- else %}
{%-     set continuous_port_names = neuron.get_continuous_input_port_names()  %}
{%- endif %}

{%- if continuous_port_names | length > 0 %}
// process inputs from continuous-type input ports
{%-     for input_port_name in continuous_port_names %}
B_.{{ input_port_name }}_grid_sum_ = get_{{ input_port_name }}().get_value(lag);
{%      endfor %}
{%- endif %}

{# process inputs from spiking-type input ports #}

{%- if ast.get_args() | length > 0 %}
{%-     set spiking_port_names = utils.filter_variables_list(neuron.get_spike_input_port_names(), ast.get_args()) %}
{%- else %}
{%-     set spiking_port_names = neuron.get_spike_input_port_names()  %}
{%- endif %}

{%- if spiking_port_names | length > 0 %}
// process inputs from spiking-type input ports
{%-     for port_name, spike_updates_for_port in spike_updates.items() %}
{%-         if port_name in spiking_port_names %}
{%-             for ast in spike_updates_for_port -%}
{%-                 if analytic_state_variables_from_convolutions | length > 0 %}

// first, integrate variables related to convolutions with this port
{%-                     for variable_name in analytic_state_variables_from_convolutions %}
{%-                         if port_name in variable_name %}
{%-                             set update_expr = update_expressions[variable_name] %}
const double {{variable_name}}__tmp = {{printer.print_expression(update_expr)}};
{%-                         endif %}
{%-                     endfor %}

{%-                    for variable_name in analytic_state_variables_from_convolutions %}
{%-                        if port_name in variable_name %}
{%-                            set variable_symbol = variable_symbols[variable_name] %}
{%-                            set update_expr = update_expressions[variable_name] %}
{{ printer.print(utils.get_state_variable_by_name(astnode, variable_symbol.get_symbol_name())) }} = {{ variable_name }}__tmp;
{%-                        endif %}
{%-                    endfor %}


{%-                 endif %}

// add the spike contribution
{%-                 include "directives/Assignment.jinja2" %}
{%-             endfor %}
{%-         endif %}
{%-     endfor %}
{%- endif %}

{#

{%- for port in neuron.get_spike_input_ports() %}
{%-   if port.has_vector_parameter() -%}
{%      set size = utils.get_numeric_vector_size(port) | int %}
{%-     for i in range(size) %}
    {{port.get_symbol_name().upper()}}_{{i + 1}} = {{ns.count}},
{%-       set ns.count = ns.count + 1 -%}
{%-     endfor %}
{%-   else %}
    {{port.get_symbol_name().upper()}} = {{ns.count}},
{%-     set ns.count = ns.count + 1 -%}
{%-   endif -%}
{%- endfor %}

#}
