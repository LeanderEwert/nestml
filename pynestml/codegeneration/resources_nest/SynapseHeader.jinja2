{#
/*
 *  SynapseHeader.jinja2
 *
 *  This file is part of NEST.
 *
 *  Copyright (C) 2004 The NEST Initiative
 *
 *  NEST is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  NEST is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with NEST.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
#}
{%- if tracing %}/* generated by {{self._TemplateReference__context.name}} */{%- else -%}{%- endif -%}
/*
*  {{synapseName}}.h
*
*  This file is part of NEST.
*
*  Copyright (C) 2004 The NEST Initiative
*
*  NEST is free software: you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation, either version 2 of the License, or
*  (at your option) any later version.
*
*  NEST is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
*  You should have received a copy of the GNU General Public License
*  along with NEST.  If not, see <http://www.gnu.org/licenses/>.
*
*  {{now}}
*/

#ifndef {{synapseName.upper()}}
#define {{synapseName.upper()}}

// Includes from nestkernel:
#include "connection.h"

/* BeginDocumentation
  Name: {{synapseName}}.

*/

#define get_post_trace()    (target->get_K_value( __t_spike - __dendritic_delay ))

namespace nest
{

class {{synapseName}}CommonSynapseProperties : public CommonSynapseProperties {
public:

    {{synapseName}}CommonSynapseProperties()
    : CommonSynapseProperties()
    {
        {%- filter indent(width=8) %}
        {%- for parameter in synapse.get_parameter_non_alias_symbols() -%}
        {%- set isHomogeneous = PyNestMLLexer["DECORATOR_HOMOGENEOUS"] in parameter.get_decorators() %}
        {%- if isHomogeneous %}
        {%- with variable = parameter %}
        {%- include "directives/CommonPropertiesDictionaryMemberInitialization.jinja2" %}
        {%- endwith %}
        {%- endif %}
        {%- endfor %}
        {%- endfilter %}
    }

    /**
     * Get all properties and put them into a dictionary.
     */
    void get_status( DictionaryDatum& d ) const
    {
        CommonSynapseProperties::get_status( d );

        {%- filter indent(width=8) %}
        
        {%- for parameter in synapse.get_parameter_non_alias_symbols() -%}
        {%- set isHomogeneous = PyNestMLLexer["DECORATOR_HOMOGENEOUS"] in parameter.get_decorators() %}
        
        {%- if isHomogeneous %}
        {%- set namespaceName = parameter.get_namespace_decorator("nest") %}
        
        {%- if namespaceName == '' %}
        {{ raise('nest::names decorator is required for parameter "%s" when used in a common properties class' % names.name(parameter)) }}
        {%- endif %}
        
        {%- with variable = parameter %}
        {%- include "directives/CommonPropertiesDictionaryWriter.jinja2" %}
        {%- endwith %}

        {%- endif %}
        {%- endfor %}
        
        {%- endfilter %}
    }
    
    
    /**
     * Set properties from the values given in dictionary.
     */
    void set_status( const DictionaryDatum& d, ConnectorModel& cm )
    {
        CommonSynapseProperties::set_status( d, cm );

        {%- filter indent(width=8) %}

        {%- for parameter in synapse.get_parameter_non_alias_symbols() -%}
        {%- set isHomogeneous = PyNestMLLexer["DECORATOR_HOMOGENEOUS"] in parameter.get_decorators() %}
        
        {%- if isHomogeneous %}
        {%- set namespaceName = parameter.get_namespace_decorator("nest") %}
        
        {%- if (namespaceName == '') %}
        {{ raise('nest::names decorator is required for parameter "%s" when used in a common properties class' % names.name(parameter)) }}
        {%- endif %}
        
        {%- with variable = parameter %}
        {%- include "directives/CommonPropertiesDictionaryReader.jinja2" %}
        {%- endwith %}
        
        {%- endif %}
        {%- endfor %}

        {%- endfilter %}
    }

    // N.B.: we define all parameters as public for easy reference conversion later on.
    // This may or may not benefit performance (TODO: compare with inline getters/setters)

    {% for parameter in synapse.get_parameter_non_alias_symbols() -%}
    {%- set isHomogeneous = PyNestMLLexer["DECORATOR_HOMOGENEOUS"] in parameter.get_decorators() %}
    {%- if (isHomogeneous) %}
    {%- set parameterName = names.name(parameter) %}
    {{declarations.print_variable_type(parameter)}} {{parameter.get_symbol_name()}};
    {%- endif %}
    {%- endfor %}
};


/**
 * Class representing a static connection. A static connection has the
 * properties weight, delay and receiver port. A suitable Connector containing
 * these connections can be obtained from the template GenericConnector.
 */
template < typename targetidentifierT >
class {{synapseName}} : public Connection< targetidentifierT >
{

private:

  double *weight_;

  /**
  * Free parameters of the synapse.
  *
  {{synapse.print_parameter_comment("*")}}
  *
  * These are the parameters that can be set by the user through @c SetStatus.
  * They are initialized from the model prototype when the node is created.
  * Parameters do not change during calls to @c update() and are not reset by
  * @c ResetNetwork.
  *
  * @note Parameters_ need neither copy constructor nor @c operator=(), since
  *       all its members are copied properly by the default copy constructor
  *       and assignment operator. Important:
  *       - If Parameters_ contained @c Time members, you need to define the
  *         assignment operator to recalibrate all members of type @c Time . You
  *         may also want to define the assignment operator.
  *       - If Parameters_ contained members that cannot copy themselves, such
  *         as C-style arrays, you need to define the copy constructor and
  *         assignment operator to copy those members.
  */
  struct Parameters_{
    {% filter indent(4,True) %}
    {%- for variable in synapse.get_parameter_non_alias_symbols() -%}
    {%- set isHomogeneous = PyNestMLLexer["DECORATOR_HOMOGENEOUS"] in variable.get_decorators() %}
    {%- if (not isHomogeneous) %}
    {%-   include 'directives/MemberDeclaration.jinja2' -%}
    {%- else %}
    // N.B. the parameter `{{names.name(variable)}}` is defined in the common properties class
    {%- endif %}
    {%- endfor -%}
    {% endfilter %}

    {% if useGSL -%}
    double __gsl_error_tol;
    {% endif -%}

    /** Initialize parameters to their default values. */
    Parameters_() {};
  };


  Parameters_ P_;  //!< Free parameters.

{#
  /**
   * All parameters marked as homogeneous will go into a CommonPropertiesDictionary
  **/

  {% for parameter in synapse.get_parameter_non_alias_symbols() -%}
    {%- set isHomogeneous = PyNestMLLexer["DECORATOR_HOMOGENEOUS"] in parameter.get_decorators() %}
    {%- if (isHomogeneous) %}
    // {-{ assert ( decl.get_variables()|length == 1 ) }-}
    {%- set parameterName = names.name(parameter) %}
    !!! homeogensou decl -->> {{parameterName}}
    {%- endif %}
  {%- endfor %}

    {%- set isHeterogeneous = PyNestMLLexer["DECORATOR_HETEROGENEOUS"] in parameter.get_decorators() %}
    {%- if (isHeterogeneous) %}
    {%- set parameterName = decl.get_variables()[0].name %}
  heterogensou decl -->> {{parameterName}}
    {%- endif %}
#}

public:

  // this line determines which common properties to use
  typedef {{synapseName}}CommonSynapseProperties CommonPropertiesType;

  typedef Connection< targetidentifierT > ConnectionBase;

  /**
   * Default constructor.
   * 
   * Sets default values for all parameters (skipping common properties).
   * 
   * Needed by GenericConnectorModel.
   */
  {{synapseName}}()
    : ConnectionBase()
  {

  {%- for parameter in synapse.get_parameter_non_alias_symbols() -%}
  {%- with variable = parameter %}

  {%- set isHomogeneous = PyNestMLLexer["DECORATOR_HOMOGENEOUS"] in variable.get_decorators() %}
  {%- if (not isHomogeneous) %}


  {%- include "directives/MemberInitialization.jinja2" %}

  {%- endif %}

  {%- endwith %}
  {%- endfor %}

    //weight_ = get_named_parameter<double>(names::weight);
    // set_weight( 1. );   // XXX: TODO: set weight to default value specified in nestml file; if no default specified, use 1.

  }

  /**
   * Copy constructor from a property object.
   * 
   * Sets default values for all parameters (skipping common properties).
   * 
   * Needs to be defined properly in order for GenericConnector to work.
   */
  {{synapseName}}( const {{synapseName}}& rhs )
    : ConnectionBase( rhs )
  {
    {% for parameter in synapse.get_parameter_non_alias_symbols() -%}
    {%- set isHomogeneous = PyNestMLLexer["DECORATOR_HOMOGENEOUS"] in parameter.get_decorators() %}
    {%- if (not isHomogeneous) %}
    {{printer.print_origin(parameter)}}{{names.name(parameter)}} = rhs.{{printer.print_origin(parameter)}}{{names.name(parameter)}};
    {%- endif %}
    {% endfor %}

    //weight_ = get_named_parameter<double>(names::weight);
    //set_weight(*(rhs.weight_));
  }

  // Explicitly declare all methods inherited from the dependent base
  // ConnectionBase. This avoids explicit name prefixes in all places these
  // functions are used. Since ConnectionBase depends on the template parameter,
  // they are not automatically found in the base class.
  using ConnectionBase::get_delay_steps;
  using ConnectionBase::get_rport;
  using ConnectionBase::get_target;


  class ConnTestDummyNode : public ConnTestDummyNodeBase
  {
  public:
    // Ensure proper overriding of overloaded virtual functions.
    // Return values from functions are ignored.
    using ConnTestDummyNodeBase::handles_test_event;
    port
    handles_test_event( SpikeEvent&, rport )
    {
      return invalid_port_;
    }
    port
    handles_test_event( RateEvent&, rport )
    {
      return invalid_port_;
    }
    port
    handles_test_event( DataLoggingRequest&, rport )
    {
      return invalid_port_;
    }
    port
    handles_test_event( CurrentEvent&, rport )
    {
      return invalid_port_;
    }
    port
    handles_test_event( ConductanceEvent&, rport )
    {
      return invalid_port_;
    }
    port
    handles_test_event( DoubleDataEvent&, rport )
    {
      return invalid_port_;
    }
    port
    handles_test_event( DSSpikeEvent&, rport )
    {
      return invalid_port_;
    }
    port
    handles_test_event( DSCurrentEvent&, rport )
    {
      return invalid_port_;
    }
  };


  /**
   * Get named parameter from the `Parameter_` struct
  **/
/*  template < typename T >
  T* get_named_parameter(const Name &n) {
    {% for parameter in synapse.get_parameter_non_alias_symbols() -%}
    {%- set namespaceName = parameter.get_namespace_decorator("nest") %}
    if (n == names::{{namespaceName}}) {
      return &{{printer.print_origin(parameter)}}{{names.name(parameter)}}; // type: {- {declarations.print_variable_type(parameter)} -}
    }
    {%- endfor %}

    assert(false);    // unknown name requested
  }
*/
  inline void set_weight(double w) {
    {%- for parameter in synapse.get_parameter_non_alias_symbols() %}
    {%- set namespaceName = parameter.get_namespace_decorator('nest') %}
    {%- if (namespaceName == 'weight') %}
    {%- set isHomogeneous = PyNestMLLexer["DECORATOR_HOMOGENEOUS"] in parameter.get_decorators() %}
    {%- if isHomogeneous %}
    throw BadProperty(
      "Setting of individual weights is not possible! The common weights can "
      "be changed via CopyModel()." );
    {%- else %}
    {{printer.print_origin(parameter)}}{{names.name(parameter)}} = w; // type: {{declarations.print_variable_type(parameter)}}
    {%- endif %}
    {%- endif %}
    {%- endfor %}
  }
  
/*  inline double get_weight() {
    {%- for parameter in synapse.get_parameter_non_alias_symbols() %}
    {%- set namespaceName = parameter.get_namespace_decorator('nest') %}
    {%- if (namespaceName == 'weight') %}
    {%- set isHomogeneous = PyNestMLLexer["DECORATOR_HOMOGENEOUS"] in parameter.get_decorators() %}
    {%- if isHomogeneous %}
    return cp.{{printer.print_origin(parameter)}}{{names.name(parameter)}}; // type: {{declarations.print_variable_type(parameter)}}   // XXX: replace with get_status or throw()
    {%- else %}
    return {{printer.print_origin(parameter)}}{{names.name(parameter)}}; // type: {{declarations.print_variable_type(parameter)}}
    {%- endif %}
    {%- endif %}
    {%- endfor %}
  }
*/
  void
  check_connection( Node& s,
    Node& t,
    rport receptor_type,
    const CommonPropertiesType& )
  {
    ConnTestDummyNode dummy_target;
    ConnectionBase::check_connection_( dummy_target, s, t, receptor_type );
  }

  void
  send( Event& e, const thread tid, const {{synapseName}}CommonSynapseProperties& cp )
  {
    // synapse STDP depressing/facilitation dynamics
    const double __t_spike = e.get_stamp().get_ms();
    
    // use accessor functions (inherited from Connection< >) to obtain delay and target
    const Node* __target = get_target( t );
    const double __dendritic_delay = get_delay();

    {
      // get spike history in relevant range (t1, t2] from post-synaptic neuron
      std::deque< histentry >::iterator start;
      std::deque< histentry >::iterator finish;

      // For a new synapse, t_lastspike_ contains the point in time of the last
      // spike. So we initially read the
      // history(t_last_spike - dendritic_delay, ..., T_spike-dendritic_delay]
      // which increases the access counter for these entries.
      // At registration, all entries' access counters of
      // history[0, ..., t_last_spike - dendritic_delay] have been
      // incremented by Archiving_Node::register_stdp_connection(). See bug #218 for
      // details.
      target->get_history( t_lastspike_ - dendritic_delay,
        t_spike - dendritic_delay,
        &start,
        &finish );
      // facilitation due to post-synaptic spikes since last pre-synaptic spike
      double minus_dt;
      while ( start != finish )
      {
        minus_dt = t_lastspike_ - ( start->t_ + dendritic_delay );
        ++start;
        // get_history() should make sure that
        // start->t_ > t_lastspike - dendritic_delay, i.e. minus_dt < 0
        assert( minus_dt < -1.0 * kernel().connection_manager.get_stdp_eps() );

        {%- filter indent(8,True) -%}

        {%- set dynamics = synapse.get_post_receive() -%}
        {%- with ast = dynamics.get_block() -%}
        {%- include "directives/Block.jinja2" -%}
        {%- endwith %}

        {%- endfilter -%}
      }
    }


    {%- filter indent(2,True) -%}

    {%- set dynamics = synapse.get_pre_receive() -%}
    {%- with ast = dynamics.get_block() -%}
    {%- include "directives/Block.jinja2" -%}
    {%- endwith %}

    {%- endfilter -%}
  }

  void get_status( DictionaryDatum& d ) const;

  void set_status( const DictionaryDatum& d, ConnectorModel& cm );
};

template < typename targetidentifierT >
void
{{synapseName}}< targetidentifierT >::get_status( DictionaryDatum& d ) const
{
  ConnectionBase::get_status( d );
  def< long >( d, names::size_of, sizeof( *this ) );
  
    {%- for parameter in synapse.get_parameter_non_alias_symbols() %}
    {%- set namespaceName = parameter.get_namespace_decorator('nest') %}
    {%- set isHomogeneous = PyNestMLLexer["DECORATOR_HOMOGENEOUS"] in parameter.get_decorators() %}
    {%- if not isHomogeneous %}
    def< {{declarations.print_variable_type(parameter)}} >( d, names::{{namespaceName}}, {{printer.print_origin(parameter)}}{{names.name(parameter)}} );
    {%- endif %}
    {%- endfor %}
}

template < typename targetidentifierT >
void
{{synapseName}}< targetidentifierT >::set_status( const DictionaryDatum& d,
  ConnectorModel& cm )
{
    ConnectionBase::set_status( d, cm );
    
    {%- for parameter in synapse.get_parameter_non_alias_symbols() %}
    {%- set namespaceName = parameter.get_namespace_decorator('nest') %}
    {%- set isHomogeneous = PyNestMLLexer["DECORATOR_HOMOGENEOUS"] in parameter.get_decorators() %}
    {%- if not isHomogeneous %}
    updateValue< {{declarations.print_variable_type(parameter)}} >( d, names::{{namespaceName}}, {{printer.print_origin(parameter)}}{{names.name(parameter)}} );
    {%- endif %}
    {%- endfor %}

    {%- for parameter in synapse.get_parameter_non_alias_symbols() %}
    {%- set namespaceName = parameter.get_namespace_decorator('nest') %}
    {%- if (namespaceName == 'weight') %}
    {%- set isHomogeneous = PyNestMLLexer["DECORATOR_HOMOGENEOUS"] in parameter.get_decorators() %}
    {%- if not isHomogeneous %}
    double _weight;
    updateValue< double >( d, names::weight, _weight );
    set_weight( _weight );
    {%- endif %}
    {%- endif %}
    {%- endfor %}
}

} // namespace

#endif /* #ifndef {{synapseName.upper()}} */
