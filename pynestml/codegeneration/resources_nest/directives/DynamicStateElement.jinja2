{#
  Generates get_state_element function to get elements state variables based on how they are inserted into the DynamicRecordablesMap
  @param neuron ASTNeuron: the neuron model
-#}

inline double get_state_element(size_t elem)
{
{%- set len = neuron.get_state_symbols() | length %}
{%- for variable in neuron.get_state_symbols() %}
{%  set varDomain = declarations.get_domain_from_type(variable.get_type_symbol()) -%}
{%  if varDomain == "double" and variable.is_recordable -%}
  {%- if loop.index == 1 -%}
    if
  {%- elif loop.index == len -%}
    else
  {%- else %}
    else if
  {%- endif -%}

  {%- if loop.index != len -%}
    {%- if variable.has_vector_parameter() -%}
      {%- set size =  variable.get_vector_parameter() -%}
      {%- if size|int == 0 -%}
        {%- set size = printer.print_vector_size_parameter(variable) -%}
      {%- endif -%}
      (elem >= State_::{{names.name(variable).upper()}} && elem < State_::{{names.name(variable).upper()}} + {{size}})
      {
        return S_.{{names.name(variable)}}[ elem - State_::{{names.name(variable).upper()}}];
      }
    {%- else -%}
      (elem == State_::{{names.name(variable).upper()}})
      {
        return S_.{{names.name(variable)}};
      }
    {%-  endif -%}
  {%- else -%}
    {%- if variable.has_vector_parameter() -%}
    {
      return S_.{{names.name(variable)}}[ elem - State_::{{names.name(variable).upper()}}];
    }
    {%- else -%}
    {
      return S_.{{names.name(variable)}};
    }
    {%- endif %}
  {%- endif %}
{%-     endif -%}
{%- endfor %}
}