#include <iostream>
#include <string>
#include <vector>
#include <list>
#include <map>
#include <complex>
#include <tuple>
#include <numeric>
#include <cmath>
#include <string.h>
#include <stdlib.h>
#include <algorithm>
#include <math.h>
#include <time.h>

// Includes from libnestutil:
#include "dict_util.h"
#include "numerics.h"

// Includes from nestkernel:
#include "nest_time.h"
#include "exceptions.h"
#include "kernel_manager.h"
#include "universal_data_logger_impl.h"

// Includes from sli:
#include "dict.h"
#include "dictutils.h"
#include "doubledatum.h"
#include "integerdatum.h"

{% macro render_variable_type(variable) -%}
{%- with -%}
    {%- set symbol = variable.get_scope().resolve_to_symbol(variable.name, SymbolKind.VARIABLE) -%}
    {{ type_converter.convert(symbol.type_symbol) }}
{%- endwith -%} 
{%- endmacro %}

namespace nest{

class {{etypeClassName~cm_unique_suffix}}{
// Example e-type with a sodium and potassium channel
private:

{%- with %}
{%- for ion_channel_name, channel_info in cm_info.items() %}
    {%- if loop.first %}{% set outer_loop_first = True %}{% endif -%}
    // {{ion_channel_name}} channel state variables
    {%- for pure_variable_name, variable_info in channel_info["inner_variables"].items() %}
        // state variable {{pure_variable_name -}}
        {%- set variable = variable_info["initial_value_variable"] %}
    {{render_variable_type(variable)}} {{ variable.name}};
    {%- endfor -%}
    {% for variable_type, variable_info in channel_info["channel_variables"].items() %}
        // parameter {{variable_type -}}
        {%- set variable = variable_info["initial_value_variable"] %}
    {{render_variable_type(variable)}} {{ variable.name}};
    {%- endfor %}
{% endfor -%}
{% endwith -%}

public:
    // constructor, destructor
    {{etypeClassName~cm_unique_suffix}}();
    {{etypeClassName~cm_unique_suffix}}(const DictionaryDatum& compartment_params);
    ~{{etypeClassName~cm_unique_suffix}}(){};

    void add_spike(){};
    std::pair< double, double > f_numstep(const double v_comp, const double lag);
    
    // function declarations
    {% for function in neuron.get_functions() %}
    {{printer.print_function_declaration(function)}};
    {% endfor %}
};

}//