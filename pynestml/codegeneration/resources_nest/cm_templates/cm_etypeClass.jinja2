#include "cm_etype.h"


nest::{{etypeClassName}}::{{etypeClassName}}()
    // sodium channel
    : m_Na_(0.0)
    , h_Na_(0.0)
    , gbar_Na_(0.0)
    , e_Na_(0.0)
    // potassium channel
    , n_K_(0.0)
    , gbar_K_(0.0)
    , e_K_(0.0)
{}
nest::{{etypeClassName}}::{{etypeClassName}}(const DictionaryDatum& compartment_params)
    // sodium channel
    : m_Na_(0.0)
    , h_Na_(0.0)
    , gbar_Na_(0.0)
    , e_Na_(50.)
    // potassium channel
    , n_K_(0.0)
    , gbar_K_(0.0)
    , e_K_(-85.)
{
    // update sodium channel parameters
    if( compartment_params->known( "g_Na" ) )
        gbar_Na_ = getValue< double >( compartment_params, "g_Na" );
    if( compartment_params->known( "e_Na" ) )
        e_Na_ = getValue< double >( compartment_params, "e_Na" );
    // update potassium channel parameters
    if( compartment_params->known( "g_K" ) )
        gbar_K_ = getValue< double >( compartment_params, "g_K" );
    if( compartment_params->known( "e_K" ) )
        e_K_ = getValue< double >( compartment_params, "e_K" );

}

std::pair< double, double > nest::{{etypeClassName}}::f_numstep(const double v_comp, const double dt)
{
    double g_val = 0., i_val = 0.;

    /*
    Sodium channel
    */
    if (gbar_Na_ > 1e-9)
    {
        // activation and timescale of state variable 'm'
        double m_inf_Na = _m_inf_Na(v_comp);
        double tau_m_Na = _tau_m_Na(v_comp);
        
        // activation and timescale of state variable 'h'
        double h_inf_Na = _h_inf_Na(v_comp);
        double tau_h_Na = _tau_h_Na(v_comp);

        // advance state variable 'm' one timestep
        double p_m_Na = exp(-dt / tau_m_Na);
        m_Na_ *= p_m_Na ;
        m_Na_ += (1. - p_m_Na) *  m_inf_Na;

        // advance state variable 'h' one timestep
        double p_h_Na = exp(-dt / tau_h_Na);
        h_Na_ *= p_h_Na ;
        h_Na_ += (1. - p_h_Na) *  h_inf_Na;

        // compute the conductance of the sodium channel
        double g_Na = gbar_Na_ * pow(m_Na_, 3) * h_Na_; // make flexible for different ion channels

        // add to variables for numerical integration
        g_val += g_Na / 2.;
        i_val += g_Na * ( e_Na_ - v_comp / 2. );
    }

    /*
    Potassium channel
    */
    if (gbar_K_ > 1e-9)
    {
        // activation and timescale of state variable 'm'
        double n_inf_K = _n_inf_K(v_comp);
        double tau_n_K = _tau_n_K(v_comp);

        // advance state variable 'm' one timestep
        double p_n_K = exp(-dt / tau_n_K);
        n_K_ *= p_n_K;
        n_K_ += (1. - p_n_K) *  n_inf_K;

        // compute the conductance of the potassium channel
        double g_K = gbar_K_ * n_K_;

        // add to variables for numerical integration
        g_val += g_K / 2.;
        i_val += g_K * ( e_K_ - v_comp / 2. );
    }

    return std::make_pair(g_val, i_val);

}

{%- for function in neuron.get_functions() %}
{{printer.print_function_definition(function, etypeClassName)}}
{
{%-   filter indent(2,True) %}
{%-   with ast = function.get_block() %}
{%-     include "directives/Block.jinja2" %}
{%-   endwith %}
{%-   endfilter %}
}
{%- endfor %}