#include "cm_etype.h"


nest::{{etypeClassName}}::{{etypeClassName}}()
{%- with %}
{%- set default_init_value = 0.0 %}
{%- for ion_channel_name, channel_info in cm_info.items() %}
    {%- if loop.first %}{% set outer_loop_first = True %}{% endif -%}
    // {{ion_channel_name}} channel
    {%- for pure_variable_name, variable_info in channel_info["inner_variables"].items() %}
        // state variable {{pure_variable_name -}}
        {%- set variable = variable_info["initial_value_variable"] %}
        {%- set rhs_expression = variable_info["rhs_expression"] %}
        {% if loop.first and outer_loop_first %}: {% else %}, {% endif %}
        {{- variable.name}}({{ default_init_value -}}) 
    {%- endfor -%}
    {% for variable_type, variable_info in channel_info["channel_variables"].items() %}
        // channel parameter {{variable_type -}}
        {%- set variable = variable_info["initial_value_variable"] %}
        {%- set rhs_expression = variable_info["rhs_expression"] %}
        ,{{- variable.name}}({{default_init_value -}}) 
    {%- endfor %}
{% endfor -%}
{% endwith %}
{}
nest::{{etypeClassName}}::{{etypeClassName}}(const DictionaryDatum& compartment_params)
{% for ion_channel_name, channel_info in cm_info.items() %}
    {%- if loop.first %}{% set outer_loop_first = True %}{% endif -%}
    // {{ion_channel_name}} channel
    {%- for pure_variable_name, variable_info in channel_info["inner_variables"].items() %}
        // state variable {{pure_variable_name -}}
        {%- set variable = variable_info["initial_value_variable"] %}
        {%- set rhs_expression = variable_info["rhs_expression"] %}
        {% if loop.first and outer_loop_first %}: {% else %}, {% endif %}
        {{- variable.name}}({{printer.print_expression(rhs_expression) -}}) 
    {%- endfor -%}
    {% for variable_type, variable_info in channel_info["channel_variables"].items() %}
        // channel parameter {{variable_type -}}
        {%- set variable = variable_info["initial_value_variable"] %}
        {%- set rhs_expression = variable_info["rhs_expression"] %}
        ,{{- variable.name}}({{printer.print_expression(rhs_expression) -}}) 
    {%- endfor %}
{% endfor -%}
{

{%- set current_conductance_name_prefix = "g" %}
{%- set current_voltage_name_prefix = "e" %}
{% macro render_channel_variable_name(variable_type, ion_channel_name) -%}
    {%- if variable_type == "gbar" -%}
        {{ current_conductance_name_prefix~"_"~ion_channel_name }}
    {%- elif variable_type == "e" -%}
        {{ current_voltage_name_prefix~"_"~ion_channel_name }}
    {%- endif -%}
{%- endmacro %}




{%- with %}
{%- for ion_channel_name, channel_info in cm_info.items() %}
    // update {{ion_channel_name}} channel parameters
    {%- for variable_type, variable_info in channel_info["channel_variables"].items() %}
        {%- set variable = variable_info["initial_value_variable"] %}
        {%- set dynamic_variable = render_channel_variable_name(variable_type, ion_channel_name) %}
        // {{ ion_channel_name}} channel parameter {{dynamic_variable }} 
        if( compartment_params->known( "{{dynamic_variable}}" ) )
            {{variable.name}} = getValue< double >( compartment_params, "{{dynamic_variable}}" );
    {%- endfor -%}
{%- endfor -%}
{% endwith %}
}

std::pair< double, double > nest::{{etypeClassName}}::f_numstep(const double v_comp, const double dt)
{
    double g_val = 0., i_val = 0.;

{% macro render_state_variable_name(pure_variable_name, ion_channel_name) -%}
    {{ pure_variable_name~"_"~ion_channel_name~"_" }}
{%- endmacro %}

{%- with %}
{%- for ion_channel_name, channel_info in cm_info.items() %}
    {%- set inline_expression = channel_info["ASTInlineExpression"] %}
    // {{ion_channel_name}} channel
    {%- for variable_type, variable_info in channel_info["channel_variables"].items() %}
        {%- set variable = variable_info["initial_value_variable"] %}
        {%- set dynamic_variable = render_channel_variable_name(variable_type, ion_channel_name) %}
        {% if variable_type == "gbar" -%}
            if ({{variable.name}} > 1e-9)
        {
        {%- for pure_variable_name, variable_info in channel_info["inner_variables"].items() %}
            // activation and timescale of state variable {{pure_variable_name}}
            {%- set inner_variable = variable_info["ASTVariable"] %}
            {%- set expected_functions_info = variable_info["expected_functions"] %}
            {%- for expected_function_type, expected_function_info in expected_functions_info.items() %}
                {%- set result_variable_name = expected_function_info["result_variable_name"] %}
                {%- set function_to_call = expected_function_info["ASTFunction"] %}
                {%- set function_parameters = function_to_call.get_parameters() %}
                // {{expected_function_type}}
                double {{ result_variable_name }} = {{function_to_call.get_name()}}(
                {%- for parameter in function_parameters -%}
                    {{- parameter.name }}
                {%- endfor -%}
                );

        {%- endfor %}
        
        {%- for pure_variable_name, variable_info in channel_info["inner_variables"].items() %}
            // advance state variable {{pure_variable_name}} one timestep
            {%- set inner_variable = variable_info["ASTVariable"] %}
            {%- set expected_functions_info = variable_info["expected_functions"] %}
            {%- set tau_result_variable_name = expected_functions_info["tau"]["result_variable_name"] %}
            {%- set inf_result_variable_name = expected_functions_info["inf"]["result_variable_name"] %}
            {%- set p_open = "p_"~pure_variable_name~"_"~ion_channel_name %}
            {%- set state_variable = render_state_variable_name(pure_variable_name, ion_channel_name) %}
            //test
            double {{p_open}} = exp(-dt / {{tau_result_variable_name}});
            {{state_variable}} *= {{p_open}} ;
            {{state_variable}} += (1. - {{p_open}}) *  {{inf_result_variable_name}};
        {%- endfor %}
        
        /*
            // compute the conductance of the {{ion_channel_name}} channel
            double g_Na = gbar_Na_ * {{ printer.print_expression(inline_expression.expression) }}; 
        */
        

    {%- endfor %}
    
            // compute the conductance of the sodium channel
            double g_Na = gbar_Na_ * pow(m_Na_, 3) * h_Na_; // make flexible for different ion channels
    
            // add to variables for numerical integration
            g_val += g_Na / 2.;
            i_val += g_Na * ( e_Na_ - v_comp / 2. );
        }
        {%- endif -%}
    {%- endfor -%}
    
    
    
    
{%- endfor -%}
{% endwith %}
*/
    /*
    Sodium channel
    */
    if (gbar_Na_ > 1e-9)
    {

        // compute the conductance of the sodium channel
        double g_Na = gbar_Na_ * pow(m_Na_, 3) * h_Na_; // make flexible for different ion channels

        // add to variables for numerical integration
        g_val += g_Na / 2.;
        i_val += g_Na * ( e_Na_ - v_comp / 2. );
    }

    /*
    Potassium channel
    */
    if (gbar_K_ > 1e-9)
    {

        // compute the conductance of the potassium channel
        double g_K = gbar_K_ * n_K_;

        // add to variables for numerical integration
        g_val += g_K / 2.;
        i_val += g_K * ( e_K_ - v_comp / 2. );
    }

    return std::make_pair(g_val, i_val);

}

{%- for function in neuron.get_functions() %}
{{printer.print_function_definition(function, etypeClassName)}}
{
{%-   filter indent(2,True) %}
{%-   with ast = function.get_block() %}
{%-     include "directives/Block.jinja2" %}
{%-   endwith %}
{%-   endfilter %}
}
{%- endfor %}