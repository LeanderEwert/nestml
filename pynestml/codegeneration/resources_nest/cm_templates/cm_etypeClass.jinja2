#include "cm_etype.h"

{% macro render_variable_type(variable) -%}
{%- with -%}
    {%- set symbol = variable.get_scope().resolve_to_symbol(variable.name, SymbolKind.VARIABLE) -%}
    {{ type_converter.convert(symbol.get_type_symbol) }}
{%- endwith -%} 
{%- endmacro -%}

{% macro render_function_return_type(function) -%}
{%- with -%}
    {%- set symbol = function.get_scope().resolve_to_symbol(function.get_name(), SymbolKind.FUNCTION) -%}
    {{ type_converter.convert(symbol.get_return_type()) }}
{%- endwith -%} 
{%- endmacro -%}

{% macro render_inline_expression_type(inline_expression) -%}
{%- with -%}
    {%- set symbol = inline_expression.get_scope().resolve_to_symbol(inline_expression.variable_name, SymbolKind.VARIABLE) -%}
    {{ type_converter.convert(symbol.get_type_symbol()) }}
{%- endwith -%} 
{%- endmacro -%}

{%- set current_conductance_name_prefix = "g" %}
{%- set current_voltage_name_prefix = "e" %}
{% macro render_dynamic_channel_variable_name(variable_type, ion_channel_name) -%}
    {%- if variable_type == "gbar" -%}
        {{ current_conductance_name_prefix~"_"~ion_channel_name }}
    {%- elif variable_type == "e" -%}
        {{ current_voltage_name_prefix~"_"~ion_channel_name }}
    {%- endif -%}
{%- endmacro -%}

{% macro render_static_channel_variable_name(variable_type, ion_channel_name) -%}

{%- with %}
{%- for ion_channel_nm, channel_info in cm_info.items() -%}
    {%- if ion_channel_nm == ion_channel_name -%}
        {%- for variable_tp, variable_info in channel_info["channel_variables"].items() -%}
            {%- if variable_tp == variable_type -%}
                {%- set variable = variable_info["initial_value_variable"] -%}
                {{ variable.name }}
            {%- endif -%}
        {%- endfor -%}
    {%- endif -%}
{%- endfor -%}
{% endwith %} 
   
{%- endmacro %}

nest::{{etypeClassName}}::{{etypeClassName}}()
{% with %}
{%- set default_init_value = 0.0 %}
{%- for ion_channel_name, channel_info in cm_info.items() %}
    {%- if loop.first %}{% set outer_loop_first = True %}{% endif -%}
    
    // {{ion_channel_name}} channel
    {%- for pure_variable_name, variable_info in channel_info["inner_variables"].items() %}
    // state variable {{pure_variable_name -}}
    {%- set variable = variable_info["initial_value_variable"] %}
    {%- set rhs_expression = variable_info["rhs_expression"] %}
    {% if loop.first and outer_loop_first %}: {% else %}, {% endif %}
    {{- variable.name}}({{ default_init_value -}}) 
    {%- endfor -%}
    
    {% for variable_type, variable_info in channel_info["channel_variables"].items() %}
    // channel parameter {{variable_type -}}
    {%- set variable = variable_info["initial_value_variable"] %}
    {%- set rhs_expression = variable_info["rhs_expression"] %}
    ,{{- variable.name}}({{default_init_value -}}) 
    {%- endfor -%}
    
{% endfor -%}
{% endwith %}
{}
nest::{{etypeClassName}}::{{etypeClassName}}(const DictionaryDatum& compartment_params)
{% for ion_channel_name, channel_info in cm_info.items() %}
    {%- if loop.first %}{% set outer_loop_first = True %}{% endif -%}
    
    // {{ion_channel_name}} channel
    {%- for pure_variable_name, variable_info in channel_info["inner_variables"].items() %}
    // state variable {{pure_variable_name -}}
    {%- set variable = variable_info["initial_value_variable"] %}
    {%- set rhs_expression = variable_info["rhs_expression"] %}
    {% if loop.first and outer_loop_first %}: {% else %}, {% endif %}
    {{- variable.name}}({{printer.print_expression(rhs_expression) -}}) 
    {%- endfor -%}
    
    {% for variable_type, variable_info in channel_info["channel_variables"].items() %}
    // channel parameter {{variable_type -}}
    {%- set variable = variable_info["initial_value_variable"] %}
    {%- set rhs_expression = variable_info["rhs_expression"] %}
    ,{{- variable.name}}({{printer.print_expression(rhs_expression) -}}) 
    {%- endfor %}
    
{% endfor -%}
{

{%- with %}
{%- for ion_channel_name, channel_info in cm_info.items() %}
// update {{ion_channel_name}} channel parameters
    
    {%- for variable_type, variable_info in channel_info["channel_variables"].items() %}
        {%- set variable = variable_info["initial_value_variable"] %}
        {%- set dynamic_variable = render_dynamic_channel_variable_name(variable_type, ion_channel_name) %}
    // {{ ion_channel_name}} channel parameter {{dynamic_variable }} 
    if( compartment_params->known( "{{dynamic_variable}}" ) )
        {{variable.name}} = getValue< double >( compartment_params, "{{dynamic_variable}}" );
    {%- endfor -%}
    
{%- endfor -%}
{% endwith %}
}

std::pair< double, double > nest::{{etypeClassName}}::f_numstep(const double v_comp, const double dt)
{
    double g_val = 0., i_val = 0.;
    
{%- macro render_state_variable_name(pure_variable_name, ion_channel_name) -%}
    {{ pure_variable_name~"_"~ion_channel_name~"_" }}
{%- endmacro -%}

{%- with %}
{%- for ion_channel_name, channel_info in cm_info.items() %}
    {%- set inline_expression = channel_info["ASTInlineExpression"] %}
    // {{ion_channel_name}} channel
    {%- for variable_type, variable_info in channel_info["channel_variables"].items() %}
        {%- set variable = variable_info["initial_value_variable"] %}
        {%- set dynamic_variable = render_dynamic_channel_variable_name(variable_type, ion_channel_name) %}
    {% if variable_type == "gbar" -%}
        {%- set gbar_variable = variable %}
    if ({{gbar_variable.name}} > 1e-9)
    {
        {% for pure_variable_name, variable_info in channel_info["inner_variables"].items() %}
        // activation and timescale of state variable {{pure_variable_name}}
            {%- set inner_variable = variable_info["ASTVariable"] %}
            {%- set expected_functions_info = variable_info["expected_functions"] %}
            {%- for expected_function_type, expected_function_info in expected_functions_info.items() %}
                {%- set result_variable_name = expected_function_info["result_variable_name"] %}
                {%- set function_to_call = expected_function_info["ASTFunction"] %}
                {%- set function_parameters = function_to_call.get_parameters() %}
        // {{expected_function_type}}
        {{render_function_return_type(function_to_call)}} {{ result_variable_name }} = {{function_to_call.get_name()}}(
        {%- for parameter in function_parameters -%}
            {{- parameter.name }}
        {%- endfor -%}
        );
        {%- endfor %}
        
        {% for pure_variable_name, variable_info in channel_info["inner_variables"].items() %}
        // advance state variable {{pure_variable_name}} one timestep
            {%- set inner_variable = variable_info["ASTVariable"] %}
            {%- set expected_functions_info = variable_info["expected_functions"] %}
            {%- set tau_result_variable_name = expected_functions_info["tau"]["result_variable_name"] %}
            {%- set inf_result_variable_name = expected_functions_info["inf"]["result_variable_name"] %}
            {%- set p_open = "p_"~pure_variable_name~"_"~ion_channel_name %}
            {%- set state_variable = render_state_variable_name(pure_variable_name, ion_channel_name) %}
        {{render_inline_expression_type(inline_expression)}} {{p_open}} = exp(-dt / {{tau_result_variable_name}}); //
        {{state_variable}} *= {{p_open}} ;
        {{state_variable}} += (1. - {{p_open}}) *  {{inf_result_variable_name}};
        {%- endfor %}
        
        {% set g_dynamic = render_dynamic_channel_variable_name("gbar", ion_channel_name) %}
        // compute the conductance of the {{ion_channel_name}} channel     
        {{render_inline_expression_type(inline_expression)}} {{ g_dynamic }} = {{gbar_variable.name}} * {{ channel_info["cleaned_p_expression_string"] }}; 
    
        // add to variables for numerical integration
        {%- set e_channel = render_static_channel_variable_name("e", ion_channel_name) %}
        g_val += {{ g_dynamic }} / 2.;
        i_val += {{ g_dynamic }} * ( {{e_channel}} - v_comp / 2. );

    {%- endfor %}
    
    }
        {%- endif -%}
    {%- endfor -%}
    
{%- endfor -%}
{% endwith %}


    return std::make_pair(g_val, i_val);

}

{%- for function in neuron.get_functions() %}
{{printer.print_function_definition(function, etypeClassName)}}
{
{%-   filter indent(2,True) %}
{%-   with ast = function.get_block() %}
{%-     include "directives/Block.jinja2" %}
{%-   endwith %}
{%-   endfilter %}
}
{%- endfor %}