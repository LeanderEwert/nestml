{#-
cm_compartmentcurrents_@NEURON_NAME@.cpp.jinja2

This file is part of NEST.

Copyright (C) 2004 The NEST Initiative

NEST is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

NEST is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with NEST.  If not, see <http://www.gnu.org/licenses/>.
#}
{%- if tracing %}/* generated by {{self._TemplateReference__context.name}} */ {% endif -%}
{%- import 'directives/FunctionDeclaration.jinja2' as function_declaration with context %}
#include "{{neuronSpecificFileNamesCmSyns["compartmentcurrents"]}}.h"

{%- set current_conductance_name_prefix = "g" %}
{%- set current_equilibrium_name_prefix = "e" %}
{% macro render_dynamic_channel_variable_name(variable_type, ion_channel_name) -%}
    {%- if variable_type == "gbar" -%}
        {{ current_conductance_name_prefix~"_"~ion_channel_name }}
    {%- elif variable_type == "e" -%}
        {{ current_equilibrium_name_prefix~"_"~ion_channel_name }}
    {%- endif -%}
{%- endmacro -%}

{%- macro render_state_variable_name(pure_variable_name, ion_channel_name) -%}
    {{ pure_variable_name~"_"~ion_channel_name }}
{%- endmacro -%}

{% macro render_time_resolution_variable(synapse_info) -%}
{# we assume here that there is only one such variable ! #}
{%- with %}
{%- for analytic_helper_name, analytic_helper_info in synapse_info["analytic_helpers"].items() -%}
{%- if analytic_helper_info["is_time_resolution"] -%}
    {{ analytic_helper_name }}
{%- endif -%}
{%- endfor -%}
{% endwith %}
{%- endmacro %}

{% macro render_function_return_type(function) -%}
{%- with -%}
    {%- set symbol = function.get_scope().resolve_to_symbol(function.get_name(), SymbolKind.FUNCTION) -%}
    {{ types_printer.print(symbol.get_return_type()) }}
{%- endwith -%}
{%- endmacro -%}

{% macro render_inline_expression_type(inline_expression) -%}
{%- with -%}
    {%- set symbol = inline_expression.get_scope().resolve_to_symbol(inline_expression.variable_name, SymbolKind.VARIABLE) -%}
    {{ types_printer.print(symbol.get_type_symbol()) }}
{%- endwith -%}
{%- endmacro -%}

{% macro render_static_channel_variable_name(variable_type, ion_channel_name) -%}

{%- with %}
{%- for ion_channel_nm, channel_info in chan_info.items() -%}
    {%- if ion_channel_nm == ion_channel_name -%}
        {%- for variable_tp, variable_info in channel_info["channel_parameters"].items() -%}
            {%- if variable_tp == variable_type -%}
                {%- set variable = variable_info["parameter_block_variable"] -%}
                {{ variable.name }}
            {%- endif -%}
        {%- endfor -%}
    {%- endif -%}
{%- endfor -%}
{% endwith %}

{%- endmacro %}

{% macro render_channel_function(function, ion_channel_name) -%}
{%- with %}
{{ function_declaration.FunctionDeclaration(function, "nest::"~ion_channel_name~cm_unique_suffix~"::") }}
{
{%-   filter indent(2,True) %}
{%-   with ast = function.get_block() %}
{%-     include "directives/Block.jinja2" %}
{%-   endwith %}
{%-   endfilter %}
}
{% endwith %}
{%- endmacro %}


{%- with %}
{%- for ion_channel_name, channel_info in chan_info.items() %}

// {{ion_channel_name}} channel //////////////////////////////////////////////////////////////////
std::size_t nest::{{ion_channel_name}}{{cm_unique_suffix}}::new_channel(std::size_t comp_ass)
{
    neuron_{{ ion_channel_name }}_channel_count++;
    i_tot_{{ion_channel_name}}.push_back(0);
    compartment_association.push_back(comp_ass);

    {%- for pure_variable_name, variable_info in channel_info["States"].items() %}
    // state variable {{pure_variable_name -}}
    {%- set variable = variable_info["ASTVariable"] %}
    {%- set rhs_expression = variable_info["rhs_expression"] %}
    {- variable.name}}.push_back({{ printer_no_origin.print_with_indices(rhs_expression, "neuron_"+ion_channel_name+"_channel_count") -}});
    {%- endfor -%}

    {% for variable_type, variable_info in channel_info["Parameters"].items() %}
    // channel parameter {{variable_type -}}
    {%- set variable = variable_info["ASTVariable"] %}
    {%- set rhs_expression = variable_info["rhs_expression"] %}
    {- variable.name}}.push_back({{ printer_no_origin.print_with_indices(rhs_expression, "neuron_"+ion_channel_name+"_channel_count") -}});
    {%- endfor -%}
}

std::size_t nest::{{ion_channel_name}}{{cm_unique_suffix}}::new_channel(std::size_t comp_ass, const DictionaryDatum& channel_params)
// update {{ion_channel_name}} channel parameters
{
    neuron_{{ ion_channel_name }}_channel_count++;
    i_tot_{{ion_channel_name}}.push_back(0)

    {%- for pure_variable_name, variable_info in channel_info["States"].items() %}
    // state variable {{pure_variable_name -}}
    {%- set variable = variable_info["ASTVariable"] %}
    {%- set rhs_expression = variable_info["rhs_expression"] %}
    {- variable.name}}.push_back({{ printer_no_origin.print_with_indices(rhs_expression, "neuron_"+ion_channel_name+"_channel_count") -}});
    {%- endfor -%}

    {% for variable_type, variable_info in channel_info["Parameters"].items() %}
    // channel parameter {{variable_type -}}
    {%- set variable = variable_info["ASTVariable"] %}
    {%- set rhs_expression = variable_info["rhs_expression"] %}
    {- variable.name}}.push_back({{ printer_no_origin.print_with_indices(rhs_expression, "neuron_"+ion_channel_name+"_channel_count") -}});
    {%- endfor -%}

    {%- with %}
    {%- for variable_type, variable_info in channel_info["Parameters"].items() %}
        {%- set variable = variable_info["ASTVariable"] %}
        {%- set dynamic_variable = render_dynamic_channel_variable_name(variable_type, ion_channel_name) %} //have to remove???????????
    // {{ion_channel_name}} channel parameter {{dynamic_variable }}
    if( channel_params->known( "{{variable.name}}" ) )
        {{variable.name}}[neuron_{{ ion_channel_name }}_channel_count-1] = getValue< double >( channel_params, "{{variable.name}}" );
    {%- endfor -%}
    {% endwith %}
}

void
nest::{{ion_channel_name}}{{cm_unique_suffix}}::append_recordables(std::map< Name, double* >* recordables,
                                               const long compartment_idx, std::size_t channel_id)
{
  // add state variables to recordables map
  {%- with %}
  {%- for pure_variable_name, variable_info in channel_info["States"].items() %}
  {%- set variable = variable_info["ASTVariable"] %}
  ( *recordables )[ Name( "{{variable.name}}" + std::to_string(compartment_idx) )] = &{{variable.name}}[channel_id];
  {%- endfor -%}
  {% endwith %}
    ( *recordables )[ Name( "i_tot_{{ion_channel_name}}" + std::to_string(compartment_idx) )] = &i_tot_{{ion_channel_name}}[channel_id];    //not gonna work! vector elements can't be safely referenced.
}

std::pair< double, double > nest::{{ion_channel_name}}{{cm_unique_suffix}}::f_numstep(const double v_comp{% for ode in channel_info["Dependencies"]["concentrations"] %}, double {{ode.lhs.name}}{% endfor %}
                        {% for inline in channel_info["Dependencies"]["receptors"] %}, double {{inline.variable_name}}{% endfor %}
                        {% for inline in channel_info["Dependencies"]["channels"] %}, double {{inline.variable_name}}{% endfor %})
{
    std::vector< double > g_val(neuron_{{ ion_channel_name }}_channel_count, 0.);
    std::vector< double > i_val(neuron_{{ ion_channel_name }}_channel_count, 0.);

    if({%- for key_zero_param in channel_info["RootInlineKeyZeros"] %} {{ key_zero_param }} > 1e-9 && {%- endfor %} true ){

        std::vector< double > d_i_tot_dv(neuron_{{ ion_channel_name }}_channel_count, 0.);

        {% if channel_info["ODEs"].items()|length %} std::vector< double > {{ printer_no_origin.print(channel_info["time_resolution_var"]) }}(neuron_{{ ion_channel_name }}_channel_count, Time::get_resolution().get_ms()); {% endif %}

        {%- for ode_variable, ode_info in channel_info["ODEs"].items() %}
            {%- for propagator, propagator_info in ode_info["transformed_solutions"][0]["propagators"].items() %}
        std::vector< double > {{ propagator }}(neuron_{{ ion_channel_name }}_channel_count, 0);
            {%- endfor %}
        {%- endfor %}

        for(std::size_t i = 0; i < neuron_{{ ion_channel_name }}_channel_count; i++){
        {%- for ode_variable, ode_info in channel_info["ODEs"].items() %}
            {%- for propagator, propagator_info in ode_info["transformed_solutions"][0]["propagators"].items() %}
            {{ propagator }}[i] = {{ printer_no_origin.print_with_indices(propagator_info["init_expression"], "i") }};
            {%- endfor %}
            {%- for state, state_solution_info in ode_info["transformed_solutions"][0]["states"].items() %}
            {{state}}[i] = {{ printer_no_origin.print_with_indices(state_solution_info["update_expression"], "i") }};
            {%- endfor %}
        {%- endfor %}

        {%- set inline_expression = channel_info["root_expression"] %}
        {%- set inline_expression_d = channel_info["inline_derivative"] %}

            // compute the conductance of the {{ion_channel_name}} channel
            this->i_tot_{{ion_channel_name}}[i] = {{ printer_no_origin.print_with_indices(inline_expression.get_expression(), "i") }};
            // derivative
            d_i_tot_dv[i] = {{ printer_no_origin.print_with_indices(inline_expression_d, "i") }};

            g_val[i] = - d_i_tot_dv[i] / 2.;
            i_val[i] = this->i_tot_{{ion_channel_name}}[i] - d_i_tot_dv[i] * v_comp / 2.;
        }
    }
    return std::make_pair(g_val, i_val);

}

{%- for function in channel_info["Functions"] %}
{{render_channel_function(function, ion_channel_name)}}
{%- endfor %}

double nest::{{ion_channel_name}}{{cm_unique_suffix}}::get_current_{{ion_channel_name}}(std::size_t channel_id){
    return this->i_tot_{{ion_channel_name}}[channel_id];
}

// {{ion_channel_name}} channel end ///////////////////////////////////////////////////////////
{% endfor -%}
{% endwith %}
////////////////////////////////////////////////////////////////////////////////






