/*
Name: stdp_synapse - Synapse type for spike-timing dependent plasticity.

Description:

stdp_synapse is a synapses with spike time dependent plasticity (as defined in [1]). Here the weight dependence exponent can be set separately for potentiation and depression.

Examples:

multiplicative STDP [2]  mu_plus = mu_minus = 1.0
additive STDP       [3]  mu_plus = mu_minus = 0.0
Guetig STDP         [1]  mu_plus = mu_minus = [0.0,1.0]
van Rossum STDP     [4]  mu_plus = 0.0 mu_minus = 1.0

Parameters:

tau_plus   double - Time constant of STDP window, potentiation in ms
                    (tau_minus defined in post-synaptic neuron)
lambda     double - Step size
alpha      double - Asymmetry parameter (scales depressing increments as
                    alpha*lambda)
mu_plus    double - Weight dependence exponent, potentiation
mu_minus   double - Weight dependence exponent, depression
Wmax       double - Maximum allowed weight

Transmits: SpikeEvent

References:

[1] Guetig et al. (2003) Learning Input Correlations through Nonlinear
    Temporally Asymmetric Hebbian Plasticity. Journal of Neuroscience

[2] Rubin, J., Lee, D. and Sompolinsky, H. (2001). Equilibrium
    properties of temporally asymmetric Hebbian plasticity, PRL
    86,364-367

[3] Song, S., Miller, K. D. and Abbott, L. F. (2000). Competitive
    Hebbian learning through spike-timing-dependent synaptic
    plasticity,Nature Neuroscience 3:9,919--926

[4] van Rossum, M. C. W., Bi, G-Q and Turrigiano, G. G. (2000).
    Stable Hebbian learning from spike timing-dependent
    plasticity, Journal of Neuroscience, 20:23,8812--8821

FirstVersion: March 2006

Author: Moritz Helias, Abigail Morrison

Adapted by: Philipp Weidel

SeeAlso: synapsedict, tsodyks_synapse, static_synapse
*/
synapse stdp:

  initial_values:
    w nS = 1.234 nS
    #Kplus real = 0.
    # N.B. Kminus is in postsynaptic partner; using `get_post_trace()`
  end

  parameters:
    the_delay ms = 1 ms  @nest::delay   # !!! cannot have a variable called "delay"
    lambda real = .01
    tau_plus ms = 20 ms
    alpha real = 1.
    mu_plus real = 1.
    mu_minus real = 1.
    Wmax nS = 100 nS
    Wmin nS = 0 nS
  end

  equations:
    # Kplus: all-to-all trace
    #shape Kplus_kernel' = -Kplus_kernel / tau_plus
    shape Kplus_kernel = exp(-t / tau_plus)
    inline Kplus real = convolve(Kplus_kernel, pre_spikes)
    #Kplus' = -Kplus / tau_plus
  end

  input:
    pre_spikes nS <- spike
  end

  postReceive:
    # potentiate synapse
    w_ nS = Wmax * ( w / Wmax  + (lambda * ( 1. - ( w / Wmax ) )**mu_plus * Kplus ))
    w = min(Wmax, w_)
  end

  preReceive:
    # depress synapse
    w_ nS = Wmax * ( w / Wmax  - ( alpha * lambda * ( w / Wmax )**mu_minus * get_post_trace() ))
    w = max(Wmin, w_)

    # deliver spike to postsynaptic partner
    deliver_spike(w, the_delay)
  end
  
  update:   # XXX: TODO: will be removed
  end

end
