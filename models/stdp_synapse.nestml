"""
Name: stdp - Synapse type for spike-timing dependent plasticity.

Description:

stdp_synapse is a synapses with spike time dependent plasticity (as defined in [1]). Here the weight dependence exponent can be set separately for potentiation and depression.

Examples:

Multiplicative STDP [2]  mu_plus = mu_minus = 1
Additive STDP       [3]  mu_plus = mu_minus = 0
Guetig STDP         [1]  mu_plus, mu_minus in [0, 1]
Van Rossum STDP     [4]  mu_plus = 0 mu_minus = 1

Parameters:

tau_plus   ms   - Time constant of STDP window, potentiation in ms (tau_minus defined in post-synaptic neuron)
lambda     real - Step size
alpha      real - Asymmetry parameter (scales depressing increments as alpha*lambda)
mu_plus    real - Weight dependence exponent, potentiation
mu_minus   real - Weight dependence exponent, depression
Wmax       nS   - Maximum allowed weight

References:

[1] Guetig et al. (2003) Learning Input Correlations through Nonlinear
    Temporally Asymmetric Hebbian Plasticity. Journal of Neuroscience

[2] Rubin, J., Lee, D. and Sompolinsky, H. (2001). Equilibrium
    properties of temporally asymmetric Hebbian plasticity, PRL
    86,364-367

[3] Song, S., Miller, K. D. and Abbott, L. F. (2000). Competitive
    Hebbian learning through spike-timing-dependent synaptic
    plasticity,Nature Neuroscience 3:9,919--926

[4] van Rossum, M. C. W., Bi, G-Q and Turrigiano, G. G. (2000).
    Stable Hebbian learning from spike timing-dependent
    plasticity, Journal of Neuroscience, 20:23,8812--8821

FirstVersion: March 2006

Author: Moritz Helias, Abigail Morrison

Adapted by: Philipp Weidel
"""
synapse stdp:

  initial_values:
    w nS = 1.234 nS
    post_trace_ real = 0.
    post_trace_nn real = 0.
  end

  parameters:
    the_delay ms = 1 ms  @nest::delay   # !!! cannot have a variable called "delay"
    lambda real = .01
    tau_plus ms = 20 ms
    tau_tr_post_nn ms = 20 ms
    alpha real = 1.
    mu_plus real = 1.
    mu_minus real = 1.
    Wmax nS = 100 nS
    Wmin nS = 0 nS
  end

  equations:
    # pre_trace: all-to-all trace
    #kernel pre_trace_kernel' = -Kplus_kernel / tau_plus
    #pre_trace' = -pre_trace / tau_plus
    kernel pre_trace_kernel = exp(-t / tau_plus)
    inline pre_trace real = convolve(pre_trace_kernel, pre_spikes)

    # nearest-neighbour trace of postsynaptic neuron
    post_trace_nn' = post_trace_nn / tau_tr_post_nn

    # all-to-all trace of postsynaptic neuron
    inline post_trace real = convolve(pre_trace_kernel, post_spikes) # XXX: really Kminus_kernel

    # all-to-all trace of postsynaptic neuron (alternative)
    post_trace_' = post_trace_ / tau_plus
  end

  input:
    pre_spikes nS <- spike
    post_spikes nS <- post spike
  end

  output: spike

  postReceive:
    # potentiate synapse
    w_ nS = Wmax * ( w / Wmax  + (lambda * ( 1. - ( w / Wmax ) )**mu_plus * pre_trace ))
    w = min(Wmax, w_)

    # update nearest neighbour trace
    post_trace_nn = 1.

    # update alternative all-to-all trace
    post_trace_ += 1.
  end

  preReceive:
    # depress synapse
    w_ nS = Wmax * ( w / Wmax  - ( alpha * lambda * ( w / Wmax )**mu_minus * post_trace ))
    w = max(Wmin, w_)

    # deliver spike to postsynaptic partner
    deliver_spike(w, the_delay)
  end
  
end
