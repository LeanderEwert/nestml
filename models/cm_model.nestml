"""
neuron_etype - 
#########################################################################

Description
+++++++++++

References
++++++++++


See also
++++++++


Author
++++++

pythonjam
"""
neuron cm_model:

  state:
    # indicate that we have a compartmental model
    # by declaring an unused variable with the name "v_comp"
    v_comp real = 0.0
    
    m_Na real = 0.0
    h_Na real = 0.0
    
    n_K real = 0.0
    
    # some Einsteinium for testing purposes ;D
    q_Es real = 0.0
    
  end

    #sodium
    function m_inf_Na(v_comp real) real:
        return (0.182*v_comp + 6.3723659999999995)/((1.0 - 0.020438532058318047*exp(-0.1111111111111111*v_comp))*((-0.124*v_comp - 4.3416119999999996)/(1.0 - 48.927192870146527*exp(0.1111111111111111*v_comp)) + (0.182*v_comp + 6.3723659999999995)/(1.0 - 0.020438532058318047*exp(-0.1111111111111111*v_comp))))
    end
    
    function tau_m_Na(v_comp real) real:
        return 0.3115264797507788/((-0.124*v_comp - 4.3416119999999996)/(1.0 - 48.927192870146527*exp(0.1111111111111111*v_comp)) + (0.182*v_comp + 6.3723659999999995)/(1.0 - 0.020438532058318047*exp(-0.1111111111111111*v_comp)))
    end
    
    function h_inf_Na(v_comp real) real:
        return 1.0/(exp(0.16129032258064516*v_comp + 10.483870967741936) + 1.0)
    end
    
    function tau_h_Na(v_comp real) real: 
        return 0.3115264797507788/((-0.0091000000000000004*v_comp - 0.68261830000000012)/(1.0 - 3277527.8765015295*exp(0.20000000000000001*v_comp)) + (0.024*v_comp + 1.200312)/(1.0 - 4.5282043263959816e-5*exp(-0.20000000000000001*v_comp)))
    end
    
    #potassium
    function n_inf_K(v_comp real) real:
        return 0.02*(v_comp - 25.0)/((1.0 - exp((25.0 - v_comp)/9.0))*((-0.002)*(v_comp - 25.0)/(1.0 - exp((v_comp - 25.0)/9.0)) + 0.02*(v_comp - 25.0)/(1.0 - exp((25.0 - v_comp)/9.0))))
    end
    
    function tau_n_K(v_comp real) real:
        return 0.3115264797507788/((-0.002)*(v_comp - 25.0)/(1.0 - exp((v_comp - 25.0)/9.0)) + 0.02*(v_comp - 25.0)/(1.0 - exp((25.0 - v_comp)/9.0)))
    end
    
    #Einsteinium ;D
    function q_inf_Es(v_comp real) real:
        return 0.02*(v_comp - 25.0)/((1.0 - exp((25.0 - v_comp)/9.0))*((-0.002)*(v_comp - 25.0)/(1.0 - exp((v_comp - 25.0)/9.0)) + 0.02*(v_comp - 25.0)/(1.0 - exp((25.0 - v_comp)/9.0))))
    end
    
    function tau_q_Es(v_comp real) real:
        return 0.3115264797507788/((-0.002)*(v_comp - 25.0)/(1.0 - exp((v_comp - 25.0)/9.0)) + 0.02*(v_comp - 25.0)/(1.0 - exp((25.0 - v_comp)/9.0)))
    end

  equations: 
    inline cm_p_open_Na real = m_Na**3 * h_Na**1 
    
    # extract channel type Na
    # and expect
    #      state variable gbar_Na = 0.0
    #      state variable of e_Na = 50.0
    
    # extract variables m and h
    # for variable m expect:
    #      state variable of m_Na_
    #      function m_inf_Na(v_comp real) real
    #      function tau_m_Na(v_comp real) real
    # for variable h expect:
    #      state variable of h_Na_
    #      function h_inf_Na(v_comp real) real
    #      function tau_h_Na(v_comp real) real
    
    inline cm_p_open_K real = n_K**1
    # extract channel type K
    # and expect
    #      state variable of gbar_K = 0.0
    #      state variable of e_K = 50.0
    
    # extract variable n
    # for variable n expect:
    #      state variable of n_Na
    #      function n_inf_Na(v_comp real) real
    #      function tau_n_Na(v_comp real) real
    
    # uncomment for testing various things
    # inline cm_p_open_Ca real = r_Na**3 * s_Ca**1 
    # inline cm_p_open_Es real = q_Es**1

  end

  parameters:
  
    e_Na real = 50.0
    gbar_Na real = 0.0
    
    e_K real = -85.0
    gbar_K real = 0.0
    
    e_Es real = 23.0
    gbar_Es real = 0.0

  end

  internals:

  end

  input:

  end

  output: spike

  update:

  end

end

#second neuron to test multiple neurons per file
neuron cm_modelx:

  state:
    
    m_Na real = 0.0
    h_Na real = 0.0
    
    n_K real = 0.0
    
    q_Es real = 0.0
    
  end
  
    #sodium
    function m_inf_Na(v_comp real) real:
        return (0.182*v_comp + 6.3723659999999995)/((1.0 - 0.020438532058318047*exp(-0.1111111111111111*v_comp))*((-0.124*v_comp - 4.3416119999999996)/(1.0 - 48.927192870146527*exp(0.1111111111111111*v_comp)) + (0.182*v_comp + 6.3723659999999995)/(1.0 - 0.020438532058318047*exp(-0.1111111111111111*v_comp))))
    end
    
    function tau_m_Na(v_comp real) real:
        return 0.3115264797507788/((-0.124*v_comp - 4.3416119999999996)/(1.0 - 48.927192870146527*exp(0.1111111111111111*v_comp)) + (0.182*v_comp + 6.3723659999999995)/(1.0 - 0.020438532058318047*exp(-0.1111111111111111*v_comp)))
    end
    
    function h_inf_Na(v_comp real) real:
        return 1.0/(exp(0.16129032258064516*v_comp + 10.483870967741936) + 1.0)
    end
    
    function tau_h_Na(v_comp real) real: 
        return 0.3115264797507788/((-0.0091000000000000004*v_comp - 0.68261830000000012)/(1.0 - 3277527.8765015295*exp(0.20000000000000001*v_comp)) + (0.024*v_comp + 1.200312)/(1.0 - 4.5282043263959816e-5*exp(-0.20000000000000001*v_comp)))
    end
    
    #potassium
    function n_inf_K(v_comp real) real:
        return 0.02*(v_comp - 25.0)/((1.0 - exp((25.0 - v_comp)/9.0))*((-0.002)*(v_comp - 25.0)/(1.0 - exp((v_comp - 25.0)/9.0)) + 0.02*(v_comp - 25.0)/(1.0 - exp((25.0 - v_comp)/9.0))))
    end
    
    function tau_n_K(v_comp real) real:
        return 0.3115264797507788/((-0.002)*(v_comp - 25.0)/(1.0 - exp((v_comp - 25.0)/9.0)) + 0.02*(v_comp - 25.0)/(1.0 - exp((25.0 - v_comp)/9.0)))
    end

  equations: 
    inline cm_p_open_Na real = m_Na**3 * h_Na**1 
    inline cm_p_open_K real = n_K**1

  end

  parameters:
  
    e_Na real = 50.0
    gbar_Na real = 0.0
    
    e_K real = -85.0
    gbar_K real = 0.0
    
    e_Es real = 23.0
    gbar_Es real = 0.0

  end

  internals:

  end

  input:

  end

  output: spike

  update:

  end

end

